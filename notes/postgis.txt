Core Concepts:
    * Geometry vs Geography:
        - Geometry: Uses Cartesian (planar) coordinates, best for small-scale projections.
        - Geography: Uses spherical coordinates (lat/lon) on an Earth-like model, suitable for large-scale queries (e.g., distance calculations).

    * Spatial Reference Systems (SRIDs):
        - SRID defines the coordinate system used for spatial data.
        - Common SRID: '4326' (WGS 84 - Latitude/Longitude)
        - Use {ST_SRID(geometry_column)} to check and {ST_SETSRID()} to assign.
    
    * Spatial Indexing:
        - GIST Index(GiST): Improves spatial query performance
        - Create an index:
            CREATE INDEX places_gix ON places USING GIST(location);
        - Works with functions like {ST_Intersects()} and {ST_DWithin()} for faster queries
    
Essential PostGIS Functions:
    * Geometric Operations:
        - ST_Intersects(geomA, geomB): Checks if two geometries intersect.
        - ST_Within(geomA, geomB): Checks if 'geomA' is within 'geomB'
        - ST_Contains(geomA, geomB): Checks if 'geomA' fully contains 'geomB'
        - ST_Touches(geomA, geomB): Checks if 'geomA' and 'geomB' share a boundary but do not overlap
    
    * Distance & Measurement:
        - ST_Distance(geomA, geomB): Returns the distance between two geometries
        - ST_DWithin(geomA, geomB, distance): Checks if geometries are within a specified distance.
        - ST_Length(geonetry): Computes the length of a line.
        - ST_Area(geometry): Returns the area of a polygon

    * Transforming and Converting Data:
        - ST_Transform(geometry, srid): Reporjects geometry to a different SRID.
        - ST_AsText(geometry): Converts to WKT (Well-Known Text).
        - ST_AsGeoJSON(geometry): Converts to GeoJSON.
        - ST_AsEWKT(geometry): Converts to Extended WKT with SRID.

    * Creating and Manipulating Geometries:
        - ST_MakePoint(lon, lat): Creates a point geometry.
        - ST_MakeLine(point1, point2): Creates a line from points.
        - ST_Buffer(geometry, radius): Expands a geometry by a given radius.
        - ST_Union(geometryA, geometryB): Merges geometries.

Advanced Features:
    * Geospatial Joins(Finding Nearby Locations):
        - Example: Find places within 5km of a given point:
            SELECT name FROM places
            WHERE ST_DWithin(
                location::geography,
                ST_SETSRID(ST_MakePoint(-73.935242, 40.730610), 4326)::geography,
                5000   -- 5 km
            );

    * Clustering & KNN Search:
        - Example: Find the nearest location:
            SELECT name, ST_Distance(location, ST_MakePoint(-73.935242, 40.730610))
            FROM places
            ORDER BY location <-> ST_MakePoint(-73.935242, 40.730610)
            LIMIT 1;
        - The '<->' operator performs a fast nearest-neighbor search
    
    * Geofencing(Checking if a Point is Inside a Polygon):
        - Example: Check if a point is inside a restricted zone:
            SELECT name FROM restricted_areas
            WHERE ST_Contains(geom, ST_SetSRID(ST_MakePoint(-73.935242, 40.730610), 4326));
    
    * Route Planning & Shortest Paths: You can integrate 'pgRouting' for pathfinding, e.g., shortest route between two points: https://hub.docker.com/r/pgrouting/pgrouting